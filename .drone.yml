---
kind: pipeline
name: default
type: docker

steps:
  # Restore cache of downloaded dependencies
  - name: restore-cache
    image: drillster/drone-volume-cache
    settings:
      restore: true
      mount:
        - .sbt
        - .ivy2
        - ui/node_modules
        - ui/bower_components
    volumes: [{name: cache, path: /cache}]

  # Run project tests
  - name: run-tests
    image: thehiveproject/drone-scala-node
    commands:
      - sbt -Duser.home=$PWD test:compile test

  # Build packages
  - name: build-packages
    image: thehiveproject/drone-scala-node
    settings:
      pgp_key: {from_secret: pgp_key}
    commands:
      - |
        V=$(sbt -no-colors --error "print thehive/version" | tail -1)
        if ( echo $V | grep -qi snapshot)
        then
          exit 1
        fi
        . ~/.nvm/nvm.sh
        [ -n "$PLUGIN_PGP_KEY" ] && gpg --batch --import - <<< $PLUGIN_PGP_KEY
        sbt -Duser.home=$PWD docker:stage debian:packageBin rpm:packageBin universal:packageBin
        if ( echo $V | grep -qi rc )
        then
          echo $( echo $V | sed -re 's/([0-9]+.[0-9]+.[0-9]+)-RC([0-9]+)-([0-9]+)/\1-RC\2,\1-RC\2-\3/' ) > .tags
        else
          echo $( echo $V | sed -re 's/([0-9]+).([0-9]+).([0-9]+)-([0-9]+)/\1,\1.\2,\1.\2.\3,\1.\2.\3-\4,latest/' ) > .tags
        fi
        echo $V > thehive-version.txt
        mv target/rpm/RPMS/noarch/thehive*.rpm target/
        mv target/universal/thehive*.zip target/
    when:
      event: [tag]

  # Save external libraries in cache
  - name: save-cache
    image: drillster/drone-volume-cache
    settings:
      rebuild: true
      backend: "filesystem"
      mount:
        - .sbt
        - .ivy2
        - .cache
        - ui/node_modules
        - ui/bower_components
    volumes: [{name: cache, path: /cache}]

  # Send packages using scp
  - name: send packages
    image: appleboy/drone-scp
    settings:
      host: {from_secret: package_host}
      username: {from_secret: package_user}
      key: {from_secret: package_key}
      target: {from_secret: incoming_path}
      source:
        - target/thehive*.deb
        - target/thehive*.rpm
        - target/thehive*.zip
      strip_components: 1
    when:
      event: [tag]

  # Publish packages
  - name: publish packages
    image: appleboy/drone-ssh
    settings:
      host: {from_secret: package_host}
      user: {from_secret: package_user}
      key: {from_secret: package_key}
      publish_script: {from_secret: publish_script}
    commands:
      - PLUGIN_SCRIPT="bash $PLUGIN_PUBLISH_SCRIPT thehive $(cat thehive-version.txt)" /bin/drone-ssh
    when:
      event: [tag]

  # Publish docker image on Docker Hub
  - name: docker
    image: plugins/docker
    settings:
      context: target/docker/stage
      dockerfile: target/docker/stage/Dockerfile
      repo: thehiveproject/thehive
      username: {from_secret: docker_username}
      password: {from_secret: docker_password}
    when:
      event: [tag]

  # Publish docker image on Harbor
  - name: harbor
    image: plugins/docker
    settings:
      context: target/docker/stage
      dockerfile: target/docker/stage/Dockerfile
      registry: {from_secret: harbor_registry}
      repo: {from_secret: harbor_repo}
      username: {from_secret: harbor_username}
      password: {from_secret: harbor_password}
    when:
      event: [tag]

  - name: send message
    image: thehiveproject/drone_keybase
    settings:
      username: {from_secret: keybase_username}
      paperkey: {from_secret: keybase_paperkey}
      channel: {from_secret: keybase_channel}
    commands:
      - |
        keybase oneshot -u "$PLUGIN_USERNAME" --paperkey "$PLUGIN_PAPERKEY"
        URL="$DRONE_SYSTEM_PROTO://$DRONE_SYSTEM_HOST/$DRONE_REPO/$DRONE_BUILD_NUMBER"
        if [ $DRONE_BUILD_STATUS = "success" ]
        then
          keybase chat send "$PLUGIN_CHANNEL" ":white_check_mark: $DRONE_REPO: build succeeded $URL"
        else
          keybase chat send "$PLUGIN_CHANNEL" ":x: $DRONE_REPO: build failed $URL"
        fi
    when:
      status:
      - success
      - failure

volumes:
  - name: cache
    host:
      path: /opt/drone/cache
